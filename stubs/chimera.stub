/**
 * Chimera - Use your AdonisJS routes in the frontend.
 *
 * This file is automatically generated by 'node ace chimera:generate'.
 * Do not edit this file manually.
 */

const Chimera = {
  // __ROUTES_PLACEHOLDER__
  // __NAME_MAP_PLACEHOLDER__
  // __OBFUSCATION_PLACEHOLDER__

  /**
   * Generates a URL for a named route.
   *
   * @param name The original, non-obfuscated name of the route (e.g., 'users.show').
   * @param params An object of route parameters.
   * @param queryParams An object for query string parameters.
   * @returns The constructed URL.
   */
  route(
    name: string,
    params: Record<string, string | number> = {},
    queryParams: Record<string, any> = {}
  ): string {
    if (typeof name !== 'string') {
      console.error('[Chimera] Invalid route name. Expected a string, but got:', name);
      return '';
    }

    let routeNameToProcess = name;

    // If obfuscation is enabled, we use the nameMap to find the real route path.
    if (this.obfuscate) {
      if (!this.nameMap || !this.nameMap[name]) {
        console.error('[Chimera] Obfuscated route "' + name + '" not found.');
        return '';
      }
      routeNameToProcess = this.nameMap[name];
    }

    const keys = routeNameToProcess.split('.');
    let pattern: any = this.routes;

    // Traverse the routes object to find the URL pattern.
    for (const key of keys) {
      if (pattern && typeof pattern === 'object' && key in pattern) {
        pattern = pattern[key];
      } else {
        pattern = undefined;
        break;
      }
    }

    if (typeof pattern !== 'string') {
      console.error('[Chimera] Route "' + name + '" could not be found.');
      return '';
    }

    // Replace path parameters (e.g., /users/:id)
    let url = pattern;
    for (const key in params) {
      url = url.replace(':' + key, String(params[key]));
      // Also support {param} style placeholders
      url = url.replace('{' + key + '}', String(params[key]));
    }

    // Append query parameters
    const searchParams = new URLSearchParams();
    for (const key in queryParams) {
      const value = queryParams[key];
      if (value !== null && value !== undefined) {
        searchParams.append(key, String(value));
      }
    }

    const queryString = searchParams.toString();
    return queryString ? url + '?' + queryString : url;
  },

  /**
   * Checks if the given route name matches the current page URL.
   * This is designed for browser environments.
   *
   * @param routeName The original, non-obfuscated name of the route.
   * @returns True if the route pattern matches the current URL path.
   */
  current(routeName: string): boolean {
    if (typeof window === 'undefined') {
      console.warn("[Chimera] 'current()' is only available in a browser environment.");
      return false;
    }

    const urlPattern = this.route(routeName);
    if (!urlPattern) {
      return false;
    }

    const regexPattern =
      '^' +
      urlPattern
        .replace(/:[^\s/]+/g, '([^/]+)')
        .replace(/\//g, '\\/') +
      '$';

    const regex = new RegExp(regexPattern);

    return regex.test(window.location.pathname);
  },
};

export default Chimera;
